#ifndef UID_H
#define UID_H

// Define categories of UID

// Line categories
#define LINE_STRAIGHT 1
#define LINE_CORNER 2
#define LINE_T_JUNCTION 3

// LED categories
#define LED_STRAIGHT 4
#define LED_CORNER_R 5
#define LED_CORNER_L 6

// Switch categories
#define SW_STRAIGHT 7
#define SW_CORNER 8
#define PUSH_SW_STRAIGHT 9
#define PUSH_SW_CORNER 10

// Resistor categories
#define RESISTOR_STRAIGHT 11
#define RESISTOR_CORNER 12

// Photodiode categories
#define PHOTODIODE 13

// ADMIN key categories
#define ADMIN_KEY_A 21
#define ADMIN_KEY_B 22
#define ADMIN_KEY_C 23
#define ADMIN_KEY_D 24
#define ADMIN_KEY_E 25
#define ADMIN_KEY_F 26
#define ADMIN_KEY_G 27
#define ADMIN_KEY_H 28
#define ADMIN_KEY_J 29

struct TagEntry
{
    byte uid[7];  // UID of the tag
    int category; // Category of the tag
};

const TagEntry registered[] = {
    {{0x04, 0x4B, 0x51, 0x5A, 0xC1, 0x2A, 0x81}, LINE_STRAIGHT},
    {{0x04, 0x8F, 0x2B, 0x5A, 0xC1, 0x2A, 0x81}, LINE_STRAIGHT},
    {{0x04, 0x81, 0x37, 0x5A, 0xC1, 0x2A, 0x81}, LINE_STRAIGHT},
    {{0x04, 0x75, 0x4B, 0x5A, 0xC1, 0x2A, 0x81}, LINE_STRAIGHT},
    {{0x04, 0x89, 0x67, 0x5A, 0xC1, 0x2A, 0x81}, LINE_STRAIGHT},
    {{0x04, 0xCE, 0x5C, 0x5A, 0xC1, 0x2A, 0x81}, LINE_STRAIGHT},
    {{0x04, 0xAC, 0x42, 0x5A, 0xC1, 0x2A, 0x81}, LINE_STRAIGHT},
    {{0x04, 0xFB, 0x22, 0x5A, 0xC1, 0x2A, 0x81}, LINE_STRAIGHT},
    {{0x04, 0x72, 0x27, 0x5A, 0xC1, 0x2A, 0x81}, LINE_STRAIGHT},
    {{0x04, 0xF9, 0x3C, 0x5A, 0xC1, 0x2A, 0x81}, LINE_STRAIGHT},
    {{0x04, 0x96, 0x2B, 0x5A, 0xC1, 0x2A, 0x81}, LINE_STRAIGHT},
    {{0x04, 0x64, 0x1E, 0x5A, 0xC1, 0x2A, 0x81}, LINE_STRAIGHT},

    {{0x04, 0x75, 0x47, 0x5A, 0xC1, 0x2A, 0x81}, LINE_CORNER},
    {{0x04, 0xFB, 0x72, 0x5A, 0xC1, 0x2A, 0x81}, LINE_CORNER},
    {{0x04, 0x61, 0x92, 0x5A, 0xC1, 0x2A, 0x81}, LINE_CORNER},
    {{0x04, 0x48, 0x4C, 0x5A, 0xC1, 0x2A, 0x81}, LINE_CORNER},
    {{0x04, 0x26, 0x3C, 0x5A, 0xC1, 0x2A, 0x81}, LINE_CORNER},
    {{0x04, 0x21, 0x7D, 0x5A, 0xC1, 0x2A, 0x81}, LINE_CORNER},
    {{0x04, 0xD9, 0x41, 0x5A, 0xC1, 0x2A, 0x81}, LINE_CORNER},
    {{0x04, 0xD8, 0x9C, 0x5A, 0xC1, 0x2A, 0x81}, LINE_CORNER},
    {{0x04, 0x97, 0xAB, 0x5A, 0xC1, 0x2A, 0x81}, LINE_CORNER},
    {{0x04, 0x29, 0xC8, 0x5A, 0xC1, 0x2A, 0x81}, LINE_CORNER},
    {{0x04, 0x15, 0xC2, 0x5A, 0xC1, 0x2A, 0x81}, LINE_CORNER},
    {{0x04, 0xE1, 0xA3, 0x5A, 0xC1, 0x2A, 0x81}, LINE_CORNER},

    {{0x04, 0x63, 0x1E, 0x5A, 0xC1, 0x2A, 0x81}, LINE_T_JUNCTION},
    {{0x04, 0x8D, 0x5B, 0x5A, 0xC1, 0x2A, 0x81}, LINE_T_JUNCTION},
    {{0x04, 0x2A, 0x86, 0x5B, 0xC1, 0x2A, 0x81}, LINE_T_JUNCTION},
    {{0x04, 0xD6, 0x86, 0x5B, 0xC1, 0x2A, 0x81}, LINE_T_JUNCTION},
    {{0x04, 0xF1, 0x61, 0x5A, 0xC1, 0x2A, 0x81}, LINE_T_JUNCTION},
    {{0x04, 0xC3, 0x68, 0x5A, 0xC1, 0x2A, 0x81}, LINE_T_JUNCTION},

    {{0x04, 0xD8, 0x3A, 0x2A, 0xBB, 0x2A, 0x81}, LED_STRAIGHT},
    {{0x04, 0xF1, 0x3E, 0x2A, 0xBB, 0x2A, 0x81}, LED_STRAIGHT},
    {{0x04, 0x99, 0x4A, 0x2A, 0xBB, 0x2A, 0x81}, LED_STRAIGHT},
    {{0x04, 0x65, 0x45, 0x2A, 0xBB, 0x2A, 0x81}, LED_STRAIGHT},

    {{0x04, 0x39, 0x56, 0x2A, 0xBB, 0x2A, 0x81}, LED_CORNER_R},
    {{0x04, 0x99, 0x82, 0x2A, 0xBB, 0x2A, 0x81}, LED_CORNER_R},

    {{0x04, 0x93, 0x4E, 0x2A, 0xBB, 0x2A, 0x81}, LED_CORNER_L},
    {{0x04, 0x62, 0x79, 0x2A, 0xBB, 0x2A, 0x81}, LED_CORNER_L},

    {{0x04, 0xA2, 0x11, 0x5B, 0xC1, 0x2A, 0x81}, SW_STRAIGHT},
    {{0x04, 0xC5, 0xFA, 0x5A, 0xC1, 0x2A, 0x81}, SW_STRAIGHT},

    {{0x04, 0x71, 0x27, 0x5A, 0xC1, 0x2A, 0x81}, SW_CORNER},
    {{0x04, 0xCD, 0x8F, 0x2A, 0xBB, 0x2A, 0x81}, SW_CORNER},

    {{0x04, 0x8E, 0xE8, 0x5A, 0xC1, 0x2A, 0x81}, PUSH_SW_STRAIGHT},
    {{0x04, 0x94, 0xEE, 0x5A, 0xC1, 0x2A, 0x81}, PUSH_SW_STRAIGHT},

    {{0x04, 0xCC, 0x39, 0x5B, 0xC1, 0x2A, 0x81}, PUSH_SW_CORNER},
    {{0x04, 0x35, 0x2F, 0x5B, 0xC1, 0x2A, 0x81}, PUSH_SW_CORNER},

    {{0x04, 0xA9, 0x6C, 0x2A, 0xBB, 0x2A, 0x81}, RESISTOR_STRAIGHT},
    {{0x04, 0xE1, 0x67, 0x2A, 0xBB, 0x2A, 0x81}, RESISTOR_STRAIGHT},
    {{0x04, 0x6A, 0x74, 0x2A, 0xBB, 0x2A, 0x81}, RESISTOR_STRAIGHT},
    {{0x04, 0x76, 0x5F, 0x2A, 0xBB, 0x2A, 0x81}, RESISTOR_STRAIGHT},

    {{0x04, 0x9B, 0x29, 0x5B, 0xC1, 0x2A, 0x81}, RESISTOR_CORNER},
    {{0x04, 0x88, 0x22, 0x5B, 0xC1, 0x2A, 0x81}, RESISTOR_CORNER},

    {{0x04, 0xE9, 0xD6, 0x5A, 0xC1, 0x2A, 0x81}, PHOTODIODE},
    {{0x04, 0xFB, 0xDC, 0x5A, 0xC1, 0x2A, 0x81}, PHOTODIODE},

    {{0x04, 0x7E, 0x57, 0x5A, 0xC1, 0x2A, 0x81}, ADMIN_KEY_A},
    {{0x04, 0xC9, 0x17, 0x5A, 0xC1, 0x2A, 0x81}, ADMIN_KEY_B},
    {{0x04, 0x53, 0x56, 0x5A, 0xC1, 0x2A, 0x81}, ADMIN_KEY_C},
    {{0x04, 0x6B, 0x8B, 0x5A, 0xC1, 0x2A, 0x81}, ADMIN_KEY_D},
    {{0x04, 0xDA, 0xCF, 0x5A, 0xC1, 0x2A, 0x81}, ADMIN_KEY_E},
    {{0x04, 0xCF, 0x1B, 0x5B, 0xC1, 0x2A, 0x81}, ADMIN_KEY_F},
    {{0x04, 0xFC, 0x87, 0x2A, 0xBB, 0x2A, 0x81}, ADMIN_KEY_G},
    {{0x04, 0x75, 0x59, 0x2A, 0xBB, 0x2A, 0x81}, ADMIN_KEY_H},
    {{0x04, 0x54, 0x38, 0x2A, 0xBB, 0x2A, 0x81}, ADMIN_KEY_J}};

// The number of registered tags
const int registeredCount = sizeof(registered) / sizeof(TagEntry);

#endif